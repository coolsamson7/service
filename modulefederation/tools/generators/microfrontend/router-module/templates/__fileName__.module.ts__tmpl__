// DO NOT TOUCH THIS FILE
// GENERATED BY MICROFRONTEND GENERATOR V1.0

import { Routes, RouterModule } from '@angular/router'
import { NgModule } from '@angular/core'
import { PortalConfigurationService } from "@modulefederation/portal";

<% for (let feature of features ) { -%>
          <%- include(process.cwd() + '/tools/generators/microfrontend/router-module/includes/import.tmpl', { feature: feature }) -%>
<% } %>

export const routes: Routes = [
 <% if (requiresRedirect) { %>
   {
      path: '',
      redirectTo: '<%= features.find(f => f.isDefault === true) || features[0].name %>',
      pathMatch: 'full'
    },
     <% } %>
     <% for (let feature of features ) { -%>
          <%- include(process.cwd() + '/tools/generators/microfrontend/router-module/includes/route.tmpl', { feature: feature, isChild: isChild }) -%>
     <% } %>
]

@NgModule({
<% if (!isChild) { %>
  imports: [RouterModule.forChild(PortalConfigurationService.registerLazyRoutes( '<%= manifest.module.name %>', routes))],
<% } else { %>
  imports: [RouterModule.forChild(PortalConfigurationService.registerLazyRoutes('<%= featureName %>', routes))],
<% } %>
  exports: [RouterModule]
})
export class <%= moduleName %> { }

