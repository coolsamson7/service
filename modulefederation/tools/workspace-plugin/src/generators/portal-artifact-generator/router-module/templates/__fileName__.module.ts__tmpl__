// DO NOT TOUCH THIS FILE
// GENERATED BY MICROFRONTEND GENERATOR V1.0

import { Routes, RouterModule } from '@angular/router'
import { NgModule } from '@angular/core'
import { PortalManager } from "@modulefederation/portal";

<% for (let feature of features ) { -%>
   <%- include(path('../includes/import.tmpl'), { feature: feature, execute: execute }) -%>
<% } %>

export const routes: Routes = [
 <% if (requiresRedirect) { %>
   {
      path: '',
      redirectTo: '<%= features.find(f => f.isDefault === true) || features[0].id %>',
      pathMatch: 'full'
    },
<% } %>
<% for (let feature of features ) if (feature.pageNotFoundFeature !== true) { -%>
          <%- include(path('../includes/route.tmpl'), { feature: feature, isChild: isChild, rootModule: rootModule, execute: execute }) -%>
<% } %>
<% if (pageNotFoundFeature) { -%>
      <%- include(path('../includes/wildcardRoute.tmpl'), { feature: pageNotFoundFeature }) -%>
<% } %>
]

@NgModule({
<% if (rootModule) { %>
  imports: [RouterModule.forChild(PortalManager.registerLazyRoutes( '<%= manifest.module.name %>', routes))],
<% } else { %>
  imports: [RouterModule.forChild(PortalManager.registerLazyRoutes('<%= featureName %>', routes))],
<% } %>
  exports: [RouterModule]
})
export class <%= moduleName %> { }

