=== TODO

- maven build web

=== NOW

- adresse ip vs name
- secure?
- channels aauswerten bei links
 a -> rest(b)  referenziert component mit channels=rest(b)

=== DENK NACH


- registriert weden services unter einer id, die den haupt spring port beinhaltet
-ALSO  <ip>:<port>:<component>

die kombi
<ip>.<port> ist die applikation ( unter der auch die introspektive dinger auggerufen werden können!

besser wäre es, wenn der rest channel genutzt wird! ( nee->cluster )

metada-a:introspective=rest(...)
meta:container=rest(...)?

=== LATER

=== DONE

- environment
- guard & redirect ?
- code checken mit claims, id, etc.
- login / logout anschliessen
- menu + name
- listen to + direkte antwort??
- admincomponent ausblenden!
- fix startup
- loadbalancer nach abstract
- logik acquire ändern ( local )
- eigner admin server
- health timer
- router listener + data.label
- test fixen...
- locator http einbauen!
- update checken
- server + slf4j
- sse / websocket
- method.parameters an ertser stelle this?????
- fehler
- keine klammern
- value
- nodes
- healthchecks lesen und anzeigen
- instance detauls analog
- FIXIT!
- instanz als subview
- layout anders ( Titel nict i bredcrumb )
- breadcrump + Abstand
- layout label feld label feld...
- checkin web
- angular + http service
- check cors
- node 6.1.0 -> 21.1.0
- npm 3.8.6 -> 10.2.0
- load balancer
- irgendetwas mit post? body
- exception handler
- channelbuilder LIST!!!
- mvn package
- kotlin
- publish ( github package )
- log delta
- list bodyToFlux(class).toList()
- test mono
- delta alte werte??
- customize... nicht build!
- delta einbauen bzw. logik validieren! -> resolve???
- resolve -> im channelinvhandle sucks -> kein channel name!!!!
- dispatch channel
- delta
- foo.bar
- common serviuce impl
- cluster vs. local
- github action
- initialer test
- channel nicht im componentdescriptor
- customize channel
- watchdog...
- http -> rest!!! URI reicht nicht
- http != https???
- mehrere module
- lib
- channel als meta!
- requestmappig an der klasse...
- consul properties??
- GetMapping erzeugen?
- wie geht jetzt local: initiale bean vs acquire?????
- lifecycle aufschreiben!
- ConsulAutoServiceRegistration
- component registratur ( auto off )
- component health
- component auflösen
- call component http...
- wie geht der actuator??
- component lifecylce
- factor???
- exceptions: build / runtime, local, remote, ..
- DELETE, ...
- methodanalyzer aufräumen
- logging
- injection?
- report
- neue annotation + supports={"http"}
- LocalChannel singleton
- parameter name
- body
- bod response
- localhost?????
- wo annotations
- http channel anfangen & ausprobieren
- add pom...
- homebrew
- consul
- channel?? ( local )
- invocation logic ( local )
- basis injection???
- proxy + factory?
- component descriptor
- service descriptir
- manager registratur
- Service interface + Abstract + Sample + annotation
- Configuration
- Sample REST service
- Property ( application.properties )

=== DENK NACH

insatcne:
  addresse: <meine-adresse>
  channales:
     rest http://...
     other http:// ...

serviceadress:
  channel: rest
  insatnces: a, b, c

 channelmanager pro address -> channel

 Logik:

 ServiceInstanceRegistry ( Map<service, List<ServcieInsatcne> )
   getAdresss(<component>)
      - finde alle insatcnes zu dem service
      - checke alle channels un dnehme den erste ( oder preferred )
      - return die gefuiletrte liste

  servucemanager getChannel(addtess) -> channelManager ( map<address,channel> )




  SItuation
  restchannel()
     address(service, "rest", insatcnes a, b, c) uri: e, f



     neu berechenn und vergleichen, wenn ja switch
  update
     serice neu
     service delete


NEU:
   Restchannel muss instacnes auf uris mappen ( Set )
   das kann einer oder meherer sein!

NEU: berechene serviceaddress nue und vergleiche!

=== LoGIK

getAllNodes()

name + ip

ServiceInstance hat node property ( -> name )

service-a-1
service-b-1
service-a-2


1 -> service-a / service-b
2 -> service a

node
